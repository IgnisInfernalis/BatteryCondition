// <auto-generated />
using BatteryCondition.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BatteryCondition.Migrations
{
    [DbContext(typeof(BatteryContext))]
    [Migration("20180621115728_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BatteryCondition.Models.AddressByDate", b =>
                {
                    b.Property<int>("AddressByDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BatteryConditionId");

                    b.Property<DateTime>("DateTime");

                    b.Property<int?>("HouseId");

                    b.HasKey("AddressByDateId");

                    b.HasIndex("BatteryConditionId");

                    b.HasIndex("HouseId");

                    b.ToTable("AddressByDates");
                });

            modelBuilder.Entity("BatteryCondition.Models.BatteryBrand", b =>
                {
                    b.Property<int>("BatteryBrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatteryBrandName");

                    b.HasKey("BatteryBrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("BatteryCondition.Models.BatteryCondition", b =>
                {
                    b.Property<int>("BatteryConditionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BatteryModelId");

                    b.HasKey("BatteryConditionId");

                    b.HasIndex("BatteryModelId");

                    b.ToTable("BatteryConditions");
                });

            modelBuilder.Entity("BatteryCondition.Models.BatteryModel", b =>
                {
                    b.Property<int>("BatteryModelId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BatteryBrandId");

                    b.Property<int>("BatteryCapacity");

                    b.Property<string>("BatteryModelName");

                    b.HasKey("BatteryModelId");

                    b.HasIndex("BatteryBrandId");

                    b.ToTable("BatteryModels");
                });

            modelBuilder.Entity("BatteryCondition.Models.CapacityByDate", b =>
                {
                    b.Property<int>("CapacityByDateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BatteryConditionId");

                    b.Property<int>("Capacity");

                    b.Property<DateTime>("DateTime");

                    b.HasKey("CapacityByDateId");

                    b.HasIndex("BatteryConditionId");

                    b.ToTable("CapacityByDates");
                });

            modelBuilder.Entity("BatteryCondition.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CityName");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BatteryCondition.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HouseNumber");

                    b.Property<int>("StreetId");

                    b.HasKey("HouseId");

                    b.HasIndex("StreetId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("BatteryCondition.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<string>("StreetName");

                    b.HasKey("StreetId");

                    b.HasIndex("CityId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("BatteryCondition.Models.AddressByDate", b =>
                {
                    b.HasOne("BatteryCondition.Models.BatteryCondition")
                        .WithMany("AddressByDates")
                        .HasForeignKey("BatteryConditionId");

                    b.HasOne("BatteryCondition.Models.House", "House")
                        .WithMany()
                        .HasForeignKey("HouseId");
                });

            modelBuilder.Entity("BatteryCondition.Models.BatteryCondition", b =>
                {
                    b.HasOne("BatteryCondition.Models.BatteryModel", "BatteryModel")
                        .WithMany()
                        .HasForeignKey("BatteryModelId");
                });

            modelBuilder.Entity("BatteryCondition.Models.BatteryModel", b =>
                {
                    b.HasOne("BatteryCondition.Models.BatteryBrand", "BatteryBrand")
                        .WithMany()
                        .HasForeignKey("BatteryBrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BatteryCondition.Models.CapacityByDate", b =>
                {
                    b.HasOne("BatteryCondition.Models.BatteryCondition")
                        .WithMany("CapacityByDates")
                        .HasForeignKey("BatteryConditionId");
                });

            modelBuilder.Entity("BatteryCondition.Models.House", b =>
                {
                    b.HasOne("BatteryCondition.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BatteryCondition.Models.Street", b =>
                {
                    b.HasOne("BatteryCondition.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
